package com.sigmabravo.rnd.jim.nitf.tre.illumb;

import static org.testng.Assert.*;

import java.util.Arrays;
import org.testng.annotations.Test;

public class HyperionTestCase {

    private static final byte[] TRE_WITH_HEADER = {
        0x49, 0x4c, 0x4c, 0x55, 0x4d, 0x42, 0x30, 0x30,
        0x35, 0x30, 0x34, 0x30, 0x30, 0x30, 0x31, (byte) 0xb5,
        0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38,
        0x2e, 0x35, 0x31, 0x39, 0x32, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x45, 0x2d, 0x30, 0x31, 0x32,
        0x2e, 0x35, 0x37, 0x37, 0x30, 0x38, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x45, 0x2b, 0x30, 0x30, 0x30,
        0x30, 0x31, 0x4e, 0x55, 0x4d, 0x5f, 0x42, 0x41,
        0x4e, 0x44, 0x53, 0x3d, 0x31, 0x20, 0x62, 0x65,
        0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x49, 0x4c,
        0x4c, 0x55, 0x4d, 0x42, 0x20, 0x68, 0x61, 0x73,
        0x20, 0x6e, 0x6f, 0x20, 0x62, 0x61, 0x6e, 0x64,
        0x2d, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
        0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65,
        0x6e, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x20,
        0x47, 0x65, 0x6f, 0x64, 0x65, 0x74, 0x69, 0x63,
        0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20,
        0x31, 0x39, 0x38, 0x34, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x57, 0x47, 0x45, 0x20, 0x57, 0x6f,
        0x72, 0x6c, 0x64, 0x20, 0x47, 0x65, 0x6f, 0x64,
        0x65, 0x74, 0x69, 0x63, 0x20, 0x53, 0x79, 0x73,
        0x74, 0x65, 0x6d, 0x20, 0x31, 0x39, 0x38, 0x34,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x57, 0x45,
        0x20, 0x47, 0x65, 0x6f, 0x64, 0x65, 0x74, 0x69,
        0x63, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x47, 0x45, 0x4f, 0x44, 0x7a, 0x00, 0x00,
        0x30, 0x30, 0x31, 0x32, 0x30, 0x30, 0x35, 0x30,
        0x34, 0x30, 0x37, 0x30, 0x37, 0x32, 0x34, 0x31,
        0x30, 0x2b, 0x33, 0x33, 0x2e, 0x32, 0x33, 0x34,
        0x39, 0x37, 0x34, 0x2b, 0x30, 0x34, 0x34, 0x2e,
        0x33, 0x33, 0x33, 0x34, 0x30, 0x35, 0x2b, 0x32,
        0x37, 0x2e, 0x38, 0x31, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x45, 0x2b, 0x30, 0x31, 0x33, 0x32, 0x2e,
        0x38, 0x2b, 0x35, 0x34, 0x2e, 0x39, 0x31, 0x36,
        0x37, 0x2e, 0x35, 0x2b, 0x35, 0x32, 0x2e, 0x35,
        0x2d, 0x31, 0x36, 0x33, 0x2e, 0x34, 0x30, 0x30,
        0x34, 0x30, 0x39, 0x39, 0x2e, 0x32, 0x2b, 0x38,
        0x34, 0x2e, 0x30
    };

    @Test
    public void parseDirect() {
        ILLUMBParser parser = new ILLUMBParser();
        ILLUMB tre =
                parser.parse(
                        "ILLUMB", Arrays.copyOfRange(TRE_WITH_HEADER, 11, TRE_WITH_HEADER.length));
        validateHyperionILLUMB(tre);
    }

    private void validateHyperionILLUMB(ILLUMB tre) {
        assertEquals(tre.getTag(), "ILLUMB");
        assertEquals(tre.getTreeItemLabel(), "ILLUMB");
        assertEquals(tre.getBand_Unit().trim(), "Âµm");
        assertEquals(tre.getBands().size(), 1);
        assertEquals(tre.getBands().get(0).getLowerBound(), "8.5192000000E-01");
        assertEquals(tre.getBands().get(0).getUpperBound(), "2.5770800000E+00");
        assertEquals(tre.getOther().size(), 0);
        assertEquals(tre.getComments().size(), 1);
        assertEquals(
                tre.getComments().get(0).getComment().trim(),
                "NUM_BANDS=1 because ILLUMB has no band-dependent content");
        assertEquals(tre.getGeo_datum().trim(), "World Geodetic System 1984");
        assertEquals(tre.getGeo_datum_code(), "WGE ");
        assertEquals(tre.getEllipsoid_name().trim(), "World Geodetic System 1984");
        assertEquals(tre.getEllipsoid_code(), "WE ");
        assertEquals(tre.getVertical_datum_ref().trim(), "Geodetic");
        assertEquals(tre.getVertical_ref_code().trim(), "GEOD");
        assertNull(tre.getRad_quantity());
        assertNull(tre.getRadq_unit());
        assertEquals(tre.getIllumConditions().size(), 1);
        IllumCondition cond = tre.getIllumConditions().get(0);
        assertNotNull(cond);
        assertEquals(cond.getDatetime(), "20050407072410");
        assertEquals(cond.getTarget_lat(), 33.234974, 0.000001);
        assertEquals(cond.getTarget_lon(), 44.333405, 0.000001);
        assertEquals(cond.getTarget_hgt(), "+27.8100000E+0");
        assertEquals(cond.getSun_azimuth(), 132.8, 0.01);
        assertEquals(cond.getSun_elev(), 54.91, 0.01);
        assertEquals(cond.getMoon_azimuth(), 167.5, 0.01);
        assertEquals(cond.getMoon_elev(), 52.5, 0.01);
        assertEquals(cond.getMoon_phase_angle(), -163.4, 0.01);
        assertEquals(cond.getMoon_illum_percent(), 4, 0.5);
    }
}
